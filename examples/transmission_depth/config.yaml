# Args: <cam_file> <obj_file> <output_dir>
{
  "version": 3,
  "setup": {
    "blender_install_path": "/home_local/<env:USER>/blender/",
    "pip": [
      "h5py", 
      "yaml"
    ]
  },
  "modules": [
    {
      "module": "main.Initializer",
      "config": {
        "global": {
          "output_dir": "<args:3>",
          "max_bounces": 64,
          "diffuse_bounces": 64,
          "glossy_bounces": 64,
          "transmission_bounces": 32,
          "transparency_bounces": 32,
        }
      }
    },
    {
      "module": "loader.CCMaterialLoader",
      "config": {
        "used_assets": ["Bricks", "Wood", "Carpet", "Tile", "Marble"],
        "folder_path": "<args:1>"
      }
    },
    {
      "module": "constructor.RandomRoomConstructor",
      "config": {
        "floor_area": 30,
        "amount_of_extrusions": 5,
        "used_loader_config": [
          {
            "module": "loader.RandomBlendLoader",
            "config": {
              "directory": "<args:0>",                    #<-------- path to a directory containing .blend files
              "datablocks": [ "objects"],   #<-------- datablock name/ID
              "obj_types": [ "mesh" ],                     #<-------- object types
              "add_properties": {
                "cp_physics": False
              }
            },
            "amount_of_repetitions": 10
          }
        ]
      }
    },
    { # Set Physics property for the walls generated by the RandomRoomConstructor
      "module": "manipulators.EntityManipulator",
      "config": {
        "selector": {
          "provider": "getter.Entity",
          "conditions": {
            "name": "\\bWall\\b|\\bFloor\\b|\\bCeiling\\b",
            "type": "MESH"
          }
        },
        "cp_physics": False,
      }
    },
    # load a set of random transmissive objects from blender files
    {
      "module": "loader.RandomBlendLoader",
      "config": {
        "directory": "<args:2>",
        "datablocks": [ "objects" ],
        "obj_types": [ "mesh" ],
        "add_properties": {
          "cp_transmissive": True,
          "cp_physics": True
        }
      },
      "amount_of_repetitions": 50
    },
    # modify the loaded transmissive objects for some variation
    { # Add a displacement modifier
      "module": "manipulators.EntityManipulator",
      "config": {
        "selector": {
          "provider": "getter.Entity",
          "random_samples": 10,
          "conditions": {
            "cp_transmissive": True
          }
        },
        "cf_add_displace_modifier_with_texture": {
          "texture": {
            "provider": "sampler.Texture",
            "textures": [ "VORONOI", "MARBLE", "MAGIC" ]
          }
        }
      }
    },
    { # scale some objects randomly
      "module": "manipulators.EntityManipulator",
      "config": {
        "selector": {
          "provider": "getter.Entity",
          "random_samples": 10,
          "conditions": {
            "cp_transmissive": True
          }
        },
        "scale": {
          "provider": "sampler.Uniform3d",
          "max": [ 2, 2, 2],
          "min": [ 0.2, 0.2, 0.2]
        }
      }
    },
    { # change the materials of some "transmissive" objects
      "module": "manipulators.MaterialManipulator",
      "config": {
        "selector": {
          "provider": "getter.Material",
          "conditions": {
            "cf_use_materials_of_objects": {
              "provider": "getter.Entity",
              "random_samples": 20,
              "conditions": {
                "cp_transmissive": True
              }
            },
          }
        },
        "cf_set_base_color": {
          "provider": "sampler.Color",
          "min": [0.3, 0.3, 0.3, 1],
          "max": [1, 1, 1, 1],
        },
        "cf_set_iOR": {
          "provider": "sampler.Value",
          "type": "float",
          "min": 1.1,
          "max": 2.0
        },
        "cf_set_roughness": {
          "provider": "sampler.Value",
          "type": "float",
          "min": 0,
          "max": 0.4
        },
        "cf_set_metallic": {
          "provider": "sampler.Value",
          "type": "int",
          "min": 0,
          "max": 2 # range exclusive
        },
        "cf_set_transmission": {
          "provider": "sampler.Value",
          "type": "int",
          "min": 0,
          "max": 2 # range exclusive
        },
      }
    },
    # Now place the transmissive objects somewhere in the room so that they can later fall down
    {
      "module": "object.ObjectPoseSampler",
      "config": {
        "objects_to_sample": {
          "provider": "getter.Entity",
          "conditions": {
            "cp_transmissive": True,
            "type": "MESH"
          }
        },
        "pos_sampler": {
          "provider": "sampler.UpperRegionSampler",
          "min_height": 0.1,
          "max_height": 1.8,
          "to_sample_on": {
            "provider": "getter.Entity",
            "index": 0,
            "conditions": {
              "name": "Floor",
              "type": "MESH"
            }
          }
        },
        "rot_sampler": {
          "provider": "sampler.Uniform3d",
          "max": [ 360, 360, 360 ],
          "min": [ 0, 0, 0 ]
        }
      }
    },
    {
      "module": "lighting.SurfaceLighting",
      "config": {
        "selector": {
          "provider": "getter.Entity",
          "conditions": {
            "name": "Ceiling"
          },
          "emission_strength": 3.0
        }
      }
    },
    { # remove all alpha components from materials, it would mess with our transparency rendering
      "module": "manipulators.MaterialManipulator",
      "config": {
        "selector": {
          "provider": "getter.Material",
          "conditions": [
            { "name": ".*" } # selects all materials
          ]
        },
        "cf_set_Alpha": 1.0 # sets the alpha value to 1.0 (not transparent)
      }
    },
    {
      "module": "object.PhysicsPositioning",
      "config": {
        "min_simulation_time": 2,
        "max_simulation_time": 5,
        "check_object_interval": 1,
        "object_stopped_location_threshold": 0.1,
        "object_stopped_rotation_threshold": 0.1,
        "collision_shape": "MESH"
      }
    },
    {
      "module": "camera.CameraSampler",
      "config": {
        "intrinsics": {
          "fov": {
            "provider": "sampler.Value",
            "type": "float",
            "min": 0.5, # ~29°
            "max": 2.0  # ~115°
          },
          "depth_of_field": {
            "fstop": {
              "provider": "sampler.Value",
              "type": "float",
              "min": 0.2, # very low fstop means objects out of focus are blurry
              "max": 8.0  #
            },
            "focal_object": {
              "provider": "getter.Entity",
              "random_samples": 1,
              "conditions": {
                "type": "MESH"
              }
            }
          }
        },
        "cam_poses": [{
          "number_of_samples": 5,
          "proximity_checks": {
            "min": 1.2
          },
          "location": {
            "provider": "sampler.UpperRegionSampler",
            "min_height": 1.5,
            "max_height": 1.8,
            "to_sample_on": {
              "provider": "getter.Entity",
              "index": 0,
              "conditions": {
                "name": "Floor",
                "type": "MESH"
              }
            }
          },
          "rotation": {
            "value": {
              "provider":"sampler.Uniform3d",
              "max":[1.4217, 0, 6.283185307],
              "min":[1.0, 0, 0]
            }
          },
          "min_interest_score": 0.4,
          "check_if_pose_above_object_list": {
            "provider": "getter.Entity",
            "conditions": {
              "name": "Floor",
              "type": "MESH"
            }
          },
          "auto_override_focal_object": true,
        }]
      }
    },
    {
      "module": "main.Mutex",
      "config": {
        "modules": [
          {
            "module": "renderer.RgbRenderer",
            "config": {
              "output_key": "colors",
              "samples": 200,
              #"render_normals": True,
              #"normals_output_key": "normals",
              #"render_distance": True,
              #"distance_output_key": "distance",
              "stereo": true,
            }
          }
        ]
      }
    },
    {
      "module": "renderer.TransDepthRenderer",
      "config": {
        "depth_layers": 6,
        "transmission_steps": 1,
        "threshold": 0.2,
        "stereo": true,
      }
    },
    {
      "module": "writer.CameraStateWriter",
      "config": {
        "attributes_to_write": [ "location", "rotation_euler", "fov_x", "fov_y", "shift_x", "shift_y", "cam_K", "cam2world_matrix", "interocular_distance", "stereo_convergence_mode", "convergence_distance" ]
      }
    },
    {
      "module": "writer.Hdf5Writer",
      "config": {
        "postprocessing_modules": {
          "distance": [
            {
              "module": "postprocessing.TrimRedundantChannels",
            }
          ],
          "distance_0": [
            {
              "module": "postprocessing.TrimRedundantChannels",
            }
          ],
          "distance_1": [
            {
              "module": "postprocessing.TrimRedundantChannels",
            }
          ],
          "distance_2": [
            {
              "module": "postprocessing.TrimRedundantChannels",
            }
          ],
          "distance_3": [
            {
              "module": "postprocessing.TrimRedundantChannels",
            }
          ],
          "distance_4": [
            {
              "module": "postprocessing.TrimRedundantChannels",
            }
          ],
          "distance_5": [
            {
              "module": "postprocessing.TrimRedundantChannels",
            }
          ],
          "distance_6": [
            {
              "module": "postprocessing.TrimRedundantChannels",
            }
          ],
        }
      }
    }
  ]
}
